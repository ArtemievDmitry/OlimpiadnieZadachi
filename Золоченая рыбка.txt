using System;
using System.Collections.Generic;
using System.IO;

public class Program
{
    public static void GetInfo(string path, out int countWords, out List<string> words, out List<(string, int)> starts, out List<(string, int)> ends)
    {
        using (var f = new StreamReader(path))
        {
            countWords = int.Parse(f.ReadLine().Trim());
            words = new List<string>();
            for (int i = 0; i < countWords; i++)
            {
                words.Add(f.ReadLine().Trim());
            }

            int countStarts = int.Parse(f.ReadLine().Trim());
            starts = new List<(string, int)>();
            for (int i = 0; i < countStarts; i++)
            {
                var parts = f.ReadLine().Split();
                starts.Add((parts[0], int.Parse(parts[1])));
            }

            int countEnds = int.Parse(f.ReadLine().Trim());
            ends = new List<(string, int)>();
            for (int i = 0; i < countEnds; i++)
            {
                var parts = f.ReadLine().Split();
                ends.Add((parts[0], int.Parse(parts[1])));
            }
        }
    }

    public static void GetAnswer(string path)
    {
        GetInfo(path, out int n, out List<string> words, out List<(string, int)> starts, out List<(string, int)> ends);

        List<string> way1 = new List<string>();
        List<string> way2 = new List<string>();

        for (int i = 0; i < n; i++)
        {
            foreach (var start in starts)
            {
                foreach (var end in ends)
                {
                    if (words[i][0] == start.Item1 && words[i][^1] == end.Item1 && start.Item2 > 0 && end.Item2 > 0)
                    {
                        way1.Add(words[i]);
                        start.Item2--;
                        end.Item2--;
                    }
                }
            }
        }

        GetInfo(path, out n, out words, out starts, out ends);
        starts.Sort((a, b) => b.Item2.CompareTo(a.Item2));
        ends.Sort((a, b) => b.Item2.CompareTo(a.Item2));

        foreach (var end in ends)
        {
            foreach (var start in starts)
            {
                for (int i = 0; i < n; i++)
                {
                    if (words[i][0] == start.Item1 && words[i][^1] == end.Item1 && start.Item2 > 0 && end.Item2 > 0)
                    {
                        way2.Add(words[i]);
                        start.Item2--;
                    }
                }
            }
        }

        int myAnswer = Math.Max(way1.Count, way2.Count);
        Console.WriteLine(myAnswer);
    }

    static void Main(string[] args)
    {
        GetAnswer("input_s1_01.txt");
    }
}